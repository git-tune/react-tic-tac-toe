{"version":3,"sources":["GlobalStyle.js","components/Board.js","components/Turn.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","RowContainer","Cell","Row","board","index","onClick","Array","fill","map","_","colIndex","_index","key","Board","TurnElement","isTurn","Turn","turns","turn","item","Header","Title","h1","Content","Footer","Button","a","StatusText","CHAR","circle","cross","STATUS_TEXT","initialState","winner","progress","statusText","handCount","isCircleTurn","App","props","onRestart","setState","state","newBoard","checkWinner","checkDraw","this","Object","values","React","Component","value","every","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qqBAGA,IAAMA,EAAcC,YAAH,KAoBF,oBAAM,kBAACD,EAAD,O,uhBCpBrB,IAAME,EAAYC,IAAOC,IAAV,KAITC,EAAeF,IAAOC,IAAV,KAOZE,EAAOH,IAAOC,IAAV,KAcJG,EAAM,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC3B,OACE,kBAACL,EAAD,KACG,IAAIM,MAAM,GAAGC,KAAK,IAAIC,KAAI,SAACC,EAAGC,GAC7B,IAAMC,EAAS,GAAKP,EAAQ,GAAKM,EAEjC,OACE,kBAACT,EAAD,CAAMW,IAAKD,EAAQN,QAFJ,kBAAMA,EAAQM,KAG1BR,EAAMQ,SAkBJE,EAVD,SAAC,GAAwB,IAAtBV,EAAqB,EAArBA,MAAOE,EAAc,EAAdA,QACtB,OACE,kBAACR,EAAD,KACE,kBAAC,EAAD,CAAKM,MAAOA,EAAOC,MAAO,EAAGC,QAASA,IACtC,kBAAC,EAAD,CAAKF,MAAOA,EAAOC,MAAO,EAAGC,QAASA,IACtC,kBAAC,EAAD,CAAKF,MAAOA,EAAOC,MAAO,EAAGC,QAASA,M,qRC9C5C,IAAMR,EAAYC,IAAOC,IAAV,KAKTe,EAAchB,IAAOC,IAAV,KAIE,qBAAEgB,OAAsB,kBAAoB,OAkBhDC,EAfF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACpB,OACE,kBAAC,EAAD,KACGD,EAAMT,KAAI,SAAAW,GACT,IAAMJ,EAASI,IAASD,EACxB,OACE,kBAACJ,EAAD,CAAaF,IAAKO,EAAMJ,OAAQA,GAC7BI,Q,s9BChBb,IAAMtB,EAAYC,IAAOC,IAAV,KAOTqB,EAAStB,IAAOC,IAAV,KAINsB,EAAQvB,IAAOwB,GAAV,KAILC,EAAUzB,IAAOC,IAAV,KAEPyB,EAAS1B,IAAOC,IAAV,KAON0B,EAAS3B,IAAO4B,EAAV,KAcNC,EAAa7B,IAAOC,IAAV,KAKV6B,EAAO,CACXC,OAAQ,SACRC,MAAO,QAGHC,EAEC,MAFDA,EAGE,OAGFC,EAAe,CACnBC,OAAQ,KACRf,KAAMU,EAAKC,OACXK,UAAU,EACVC,WATa,cAUbC,UAAW,EACXC,cAAc,EACdlC,MAAO,IAAIG,MAAM,IAGEgC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,UAAY,WACV,EAAKC,SAAL,eAAmBT,KANF,EASnB3B,QAAU,SAACD,GAAW,IAAD,EAC0B,EAAKsC,MAA1CvC,EADW,EACXA,MAAOiC,EADI,EACJA,UAAWF,EADP,EACOA,SAAUhB,EADjB,EACiBA,KACpC,IAAIf,EAAMC,IAAW8B,EAArB,CAIA,IAAMS,EAAQ,YAAOxC,GACrBwC,EAASvC,GAASc,EAClB,EAAKuB,SAAS,CACZtC,MAAOwC,EACPP,YACAlB,KAAMA,IAASU,EAAKC,OAASD,EAAKE,MAAQF,EAAKC,SAG7Ce,EAAYD,EAAUzB,EAAMd,GAC9B,EAAKqC,SAAS,CACZP,UAAU,EACVD,OAAQf,EACRiB,WAAYjB,EAAO,IAAMa,IAKzBc,EAAUF,IACZ,EAAKF,SAAS,CACZP,UAAU,EACVC,WAAYJ,MAjChB,EAAKW,MAAL,eAAkBV,GAFD,E,qDAyCT,IAAD,EAC6Bc,KAAKJ,MAAjCxB,EADD,EACCA,KAAMf,EADP,EACOA,MAAOgC,EADd,EACcA,WAErB,OACE,kBAAC,EAAD,KACE,kBAACZ,EAAD,KACE,kBAAC,EAAD,MACA,kBAACH,EAAD,KACE,kBAACC,EAAD,oBACA,kBAAC,EAAD,CAAMJ,MAAO8B,OAAOC,OAAOpB,GAAOV,KAAMA,KAE1C,kBAAC,EAAD,CAAOf,MAAOA,EAAOE,QAASyC,KAAKzC,UACnC,kBAACmB,EAAD,KACE,kBAACG,EAAD,KAAaQ,GACb,kBAACV,EAAD,CAAQpB,QAASyC,KAAKN,WAAtB,kB,GAxDqBS,IAAMC,WAgEjCN,EAAc,SAACzC,EAAOgD,GAa1B,MACE,CAAC,EAAG,EAAG,GAAGC,OAAM,SAACjC,GAAD,OAAUhB,EAAMgB,KAAUgC,MAC1C,CAAC,EAAG,EAAG,GAAGC,OAAM,SAACjC,GAAD,OAAUhB,EAAMgB,KAAUgC,MAC1C,CAAC,EAAG,EAAG,GAAGC,OAAM,SAACjC,GAAD,OAAUhB,EAAMgB,KAAUgC,MAC1C,CAAC,EAAG,EAAG,GAAGC,OAAM,SAACjC,GAAD,OAAUhB,EAAMgB,KAAUgC,MAC1C,CAAC,EAAG,EAAG,GAAGC,OAAM,SAACjC,GAAD,OAAUhB,EAAMgB,KAAUgC,MAC1C,CAAC,EAAG,EAAG,GAAGC,OAAM,SAACjC,GAAD,OAAUhB,EAAMgB,KAAUgC,MAC1C,CAAC,EAAG,EAAG,GAAGC,OAAM,SAACjC,GAAD,OAAUhB,EAAMgB,KAAUgC,MAC1C,CAAC,EAAG,EAAG,GAAGC,OAAM,SAACjC,GAAD,OAAUhB,EAAMgB,KAAUgC,MAIxCN,EAAY,SAAC1C,GACjB,OAAOA,EAAMiD,OAAM,SAACjC,GAAD,OAAUA,MCpJXkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.636d984a.chunk.js","sourcesContent":["import React from 'react';\nimport { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n html {\n    font-family: 'Lato', 'Lucida Grande', 'Lucida Sans Unicode', Tahoma, Sans-Serif;\n    line-height: 1.5;\n    font-size: 15px;\n    font-weight: 400:\n  }\n  body {\n    padding: 0;\n    margin: 0;\n  }\n  *, *:before, *:after {\n    box-sizing: border-box;\n  }\n  h1 {\n    font-size: 1.2rem;\n  }\n`\n\n\nexport default () => <GlobalStyle />;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  border: 1px solid black;\n`;\n\nconst RowContainer = styled.div`\n  display: flex;\n  border-bottom: 1px solid black;\n  &:last-child {\n    border-bottom: 0;\n  }\n`;\nconst Cell = styled.div`\n  width: 3rem;\n  height: 3rem;\n  font-size: 2rem;\n  text-align: center;\n  border-right: 1px solid black;\n  &:hover {\n    cursor: pointer;\n  }\n  &:last-child {\n    border-right: 0;\n  }\n`;\n\nconst Row = ({ board, index, onClick }) => {\n  return (\n    <RowContainer>\n      {new Array(3).fill('').map((_, colIndex) => {\n        const _index = 3 * (index - 1) + colIndex;\n        const _onClick = () => onClick(_index);\n        return (\n          <Cell key={_index} onClick={_onClick}>\n            {board[_index]}\n          </Cell>\n        );\n      })}\n    </RowContainer>\n  );\n};\n\nconst Board = ({ board, onClick }) => {\n  return (\n    <Container>\n      <Row board={board} index={1} onClick={onClick} />\n      <Row board={board} index={2} onClick={onClick} />\n      <Row board={board} index={3} onClick={onClick} />\n    </Container>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst TurnElement = styled.div`\n  padding: 8px 16px;\n  font-size: 1.2rem;\n  font-weight: bold;\n  border-bottom: ${({isTurn}) => (isTurn ? '3px solid black' : '0')};\n`;\n\nconst Turn = ({turns, turn}) => {\n  return (\n    <Container>\n      {turns.map(item => {\n        const isTurn = item === turn;\n        return (\n          <TurnElement key={item} isTurn={isTurn}>\n            {item}\n          </TurnElement>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Turn;","import React from 'react';\nimport styled from 'styled-components';\nimport GlobalStyle from './GlobalStyle';\nimport Board from './components/Board';\nimport Turn from './components/Turn';\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n`;\n\nconst Header = styled.div`\n  padding: 16px;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst Content = styled.div``;\n\nconst Footer = styled.div`\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst Button = styled.a`\n  display: inline-block;\n  text-align: center;\n  font-weight: bold;\n  border: 3px solid black;\n  border-radius: 6px;\n  padding: 4px 16px;\n  &:hover {\n    background: black;\n    color: white;\n    cursor: pointer;\n  }\n`;\n\nconst StatusText = styled.div`\n  text-align: center;\n  padding: 8px;\n`;\n\nconst CHAR = {\n  circle: '○',\n  cross: '×',\n};\n\nconst STATUS_TEXT = {\n  progressing: 'progressing',\n  win: 'win',\n  draw: 'draw',\n};\n\nconst initialState = {\n  winner: null,\n  turn: CHAR.circle,\n  progress: true,\n  statusText: STATUS_TEXT.progressing,\n  handCount: 0,\n  isCircleTurn: true,\n  board: new Array(9),\n};\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...initialState };\n  }\n\n  onRestart = () => {\n    this.setState({ ...initialState });\n  };\n\n  onClick = (index) => {\n    const { board, handCount, progress, turn } = this.state;\n    if (board[index] || !progress) {\n      return;\n    }\n\n    const newBoard = [...board];\n    newBoard[index] = turn;\n    this.setState({\n      board: newBoard,\n      handCount,\n      turn: turn === CHAR.circle ? CHAR.cross : CHAR.circle,\n    });\n\n    if (checkWinner(newBoard, turn, index)) {\n      this.setState({\n        progress: false,\n        winner: turn,\n        statusText: turn + ' ' + STATUS_TEXT.win,\n      });\n      return;\n    }\n\n    if (checkDraw(newBoard)) {\n      this.setState({\n        progress: false,\n        statusText: STATUS_TEXT.draw,\n      });\n      return;\n    }\n  };\n\n  render() {\n    const { turn, board, statusText } = this.state;\n\n    return (\n      <Container>\n        <Content>\n          <GlobalStyle />\n          <Header>\n            <Title>Tic Tac Toe</Title>\n            <Turn turns={Object.values(CHAR)} turn={turn} />\n          </Header>\n          <Board board={board} onClick={this.onClick} />\n          <Footer>\n            <StatusText>{statusText}</StatusText>\n            <Button onClick={this.onRestart}>Restart</Button>\n          </Footer>\n        </Content>\n      </Container>\n    );\n  }\n}\n\nconst checkWinner = (board, value) => {\n  //   const lines = [\n  //     [0, 1, 2],\n  //     [3, 4, 5],\n  //     [6, 7, 8],\n  //     [0, 3, 6],\n  //     [1, 4, 7],\n  //     [2, 5, 8],\n  //     [0, 4, 8],\n  //     [2, 4, 8],\n  //   ];\n  //   return lines.every((item) => board[item] === value);\n\n  return (\n    [0, 1, 2].every((item) => board[item] === value) ||\n    [3, 4, 5].every((item) => board[item] === value) ||\n    [6, 7, 8].every((item) => board[item] === value) ||\n    [0, 3, 6].every((item) => board[item] === value) ||\n    [1, 4, 7].every((item) => board[item] === value) ||\n    [2, 5, 8].every((item) => board[item] === value) ||\n    [0, 4, 8].every((item) => board[item] === value) ||\n    [2, 4, 6].every((item) => board[item] === value)\n  );\n};\n\nconst checkDraw = (board) => {\n  return board.every((item) => item);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}